package com.dxsoft.houseApp.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Properties;

import android.app.Activity;
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;

import com.dxsoft.houseApp.activity.MenuListDetailActivity;
import com.dxsoft.houseApp.base.C;
import com.dxsoft.houseApp.base.HouseConfig;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;

public class HouseUtil {
	private static SimpleDateFormat sd = new SimpleDateFormat(HouseConfig.DATE_YYYYMMDD);
	public static Map<String, String> json2Map(String jsonStr) {

		GsonBuilder gb = new GsonBuilder();
		Gson g = gb.create();
		Map<String, String> map = g.fromJson(jsonStr,
				new TypeToken<Map<String, String>>() {
				}.getType());
		return map;

	}
	/**
	 * 读取properties文件
	 */
	public static String getProperValue(Context c,String str){
		
		String value = null;
		  Properties pro = new Properties();
		  try {
			  pro.load(MenuListDetailActivity.class.getResourceAsStream(C.FILEPATH));
			  value = pro.getProperty(str);
		  } catch (Exception e) {
		   e.printStackTrace();
		  }
		  return value;
	}
	/**
	 * 转换格式YYYY-MM-DD
	 * @param dateLong
	 * @return
	 */
	public static String dateFormatString(long dateLong){
		Date date = new Date(dateLong);
		return sd.format(date);
	}
	/**
	 * 转换格式YYYY-MM-DD
	 * @param dateLong
	 * @return
	 */
	public static Date stringFormatDate(String str){
		Date parse=new Date();
		try {
			parse= sd.parse(str);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return parse;
	}
	
	/**
     * 检查当前网络是否可用
     * @param context
     * @return
     */
    public static boolean isNetworkAvailable(Activity activity){
        Context context = activity.getApplicationContext();
        // 获取手机所有连接管理对象（包括对wi-fi,net等连接的管理）
        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        if (connectivityManager == null){
            return false;
        }else{
            NetworkInfo[] networkInfo = connectivityManager.getAllNetworkInfo();
            if (networkInfo != null && networkInfo.length > 0){
                for (int i = 0; i < networkInfo.length; i++){
                    // 判断当前网络状态是否为连接状态
                    if (networkInfo[i].getState() == NetworkInfo.State.CONNECTED){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
}
